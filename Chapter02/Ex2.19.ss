(define (cc amount coin-values)
  (define (recur amount coin-values)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (null? coin-values)) 0)
          (else (+ (recur (- amount (car coin-values)) coin-values)
                   (recur amount (cdr coin-values))))))
  (recur amount (sort coin-values >)))

(define (cc-with-countor amount coin-values)
  (define countor 0)
  (define (call)
    (set! countor (+ countor 1)))
  (define (get-countor)
    countor)
  (define (recur amount coin-values)
    (call)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (null? coin-values)) 0)
          (else (+ (recur (- amount (car coin-values)) coin-values)
                   (recur amount (cdr coin-values))))))
  (display "Result: ")
  (display (recur amount coin-values))
  (display "\nRecur Calls: ")
  (display (get-countor))
  (newline))

(cc-with-countor 100 '(50 25 10 5 1))
(cc-with-countor 100 (reverse '(50 25 10 5 1)))

(cc-with-countor 100 '(100 50 20 10 5 2 1 1/2))
(cc-with-countor 100 (reverse '(100 50 20 10 5 2 1 1/2)))
;;The result shows that order of the list don't affect the answer, but affect the efficiency of program.
