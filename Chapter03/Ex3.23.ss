;;An awkward version, I will redesign lately

(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))
(define (penultimate deque)
  (define (recur med-ptr)
	(if (eq? (cdr med-ptr) (rear-ptr deque))
		med-ptr
		(recur (cdr med-ptr))))
  (recur (front-ptr deque)))

(define (make-deque)
  (cons '() '()))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
	  (error "FRONT called with an empty deque" deque)
	  (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
	  (error "REAR called with an empty deque" deque)
	  (car (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-item (cons item '())))
	(cond ((empty-deque? deque)
		   (set-car! deque new-item)
		   (set-cdr! deque new-item))
		  (else
		   (set-cdr! new-item (front-ptr deque))
		   (set-car! deque new-item)))))
(define (rear-insert-deque! deque item)
  (let ((new-item (cons item '())))
	(cond ((empty-deque? deque)
		   (set-car! deque new-item)
		   (set-cdr! deque new-item))
		  (else
		   (set-cdr! (rear-ptr deque) new-item)
		   (set-cdr! deque new-item)))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
		 (error "FRONT-DELETE-DEQUE called with an empty deque" deque))
		((eq? (front-ptr deque) (rear-ptr deque))
		 (set-car! deque '())
		 (set-cdr! deque '()))
		(else
		 (set-car! deque (cdr (front-ptr deque))))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
		 (error "REAR-DELETE-DEQUE called with an empty deque" deque))
		((eq? (front-ptr deque) (rear-ptr deque))
		 (set-car! deque '())
		 (set-cdr! deque '()))
		(else
		 (set-cdr! deque (penultimate deque))
		 (set-cdr! (rear-ptr deque) '()))))
(define (print-deque deque)
  (front-ptr deque))
