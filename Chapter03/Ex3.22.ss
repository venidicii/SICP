(define (make-queue)
  (let ((front-ptr '())
		(rear-ptr '()))	
	(define (dispatch m)
	  (cond ((eq? m 'print-queue)
			 front-ptr)
			((eq? m 'empty-queue?)
			 (null? front-ptr))
			((eq? m 'front-queue)
			 (if (null? front-ptr)
				 (error "FRONT called with an empty queue" queue)
				 (car front-ptr)))
			((eq? m 'delete-queen!)
			 (if (null? front-ptr)
				 (error "DELETE! called with an empty queue" queue)
				 (begin
				   (set! front-ptr (cdr front-ptr))
				   front-ptr)))
			((eq? m 'insert-queue!)
			 (lambda (val)
			   (let ((new-pair (cons val '())))
				 (cond ((null? front-ptr)
						(set! front-ptr new-pair)
						(set! rear-ptr new-pair))
					   (else
						(set-cdr! rear-ptr new-pair)
						(set! rear-ptr new-pair))))))))
	dispatch))

(define (empty-queue? queue)
  (queue 'empty-queue?))
(define (front-queue queue)
  (queue 'front-queue))
(define (delete-queen! queue)
  (queue 'delete-queen!))
(define (insert-queue! queue val)
  ((queue 'insert-queue!) val)
  (print-queue queue))
(define (print-queue queue)
  (queue 'print-queue))
